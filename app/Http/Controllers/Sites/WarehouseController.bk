<?php

namespace App\Http\Controllers\Sites;

use App\Models\Shop;
use App\Models\Uniques;
use App\Models\Campaign;
use App\Models\Privilege;
use App\Models\Warehouse;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\File as FileModel;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Crypt;

class WarehouseController extends Controller
{
    public function index(Campaign $campaign)
    {
        $uniques = $campaign->uniques ?? [];

        return view('site.warehouse.index', compact('campaign'))->with(compact('uniques'));
    }

    public function getPathRedeem($owner_keyword, $campaign_keyword, $unique_code)
    {
        return env('APP_URL_REDEEM') . Str::lower("{$owner_keyword}/{$campaign_keyword}/{$unique_code}");
    }

    public function import(Campaign $campaign)
    {
        $privilege_list = [];
        $templates = [];
        $privileges = $campaign->privileges;
        switch ($campaign->template_type) {
            case 'STD':
                foreach ($privileges as $key => $privilege) {
                    $end_date = date('Y-m-d', strtotime($privilege->end_date));
                    $privilege_list[$privilege->shop->keyword]['title'] = $privilege->shop->name;
                    $privilege_list[$privilege->shop->keyword]['list'][$end_date][] = $privilege->value;
                }
                break;

            case 'CTM':
                foreach ($privileges as $key => $privilege) {
                    $templates[$privilege->id]['expire'] = date('Y-m-d', strtotime($privilege->end_date));
                    $templates[$privilege->id]['value'] = $privilege->value;
                    $templates[$privilege->id]['template'] = FileModel::where('table_id', $privilege->id)->where('table_name', 'privileges')->value('origin_name');
                }
                break;
        }


        return view('site.warehouse._form', compact('campaign'))->with('privileges', $privilege_list)->with('templates', $templates);
    }

    public function upload(Request $request, Campaign $campaign)
    {
        $uuid = base64_encode(auth()->id());
        if ($request->hasFile('filepond')) {
            $file = $request->file('filepond');
            $temp_path = storage_path("temp_file/{$campaign->keyword}/");
            $temp_name = "file_{$uuid}.tmp";
            $temp_path_file = $temp_path . $temp_name;

            $file->move($temp_path, $temp_name);

            $temp_file_content = File::get($temp_path_file);
            $encrypt_content = Crypt::encrypt($temp_file_content);
            File::put($temp_path_file, $encrypt_content);

            return response()->json(['status' => 'ok'], 200);
        } else {
            return response()->json(['status' => 'error'], 400);
        }
    }

    public function checkFormat(Request $request, Campaign $campaign)
    {
        $uuid = base64_encode(auth()->id());
        $type = $request->type_split_data;
        $temp_path_file = storage_path("temp_file/{$campaign->keyword}/file_{$uuid}.tmp");
        $temp_file_encrypt = File::get($temp_path_file);
        $temp_file_content = Crypt::decrypt($temp_file_encrypt);


        $db_code = DB::connection('storage_code')->table($campaign->table_name)->where(['flag' => ['ok', 'deviate']])->pluck('code')->toArray();
        $already_code = [];
        if ($temp_file_content) {
            $contents = explode("\r\n",  $temp_file_content);
            switch ($campaign->template_type) {
                case 'STD':
                    $privilege_list = [];
                    if ($campaign->privileges) {
                        foreach ($campaign->privileges as $privilege) {
                            $end_date = date('Y-m-d', strtotime($privilege->end_date));
                            $privilege_list[$privilege->shop->keyword][$end_date][] = $privilege->value;
                        }
                    }
                    foreach ($contents as $key => $data) {
                        $line = $key + 1;
                        $split_data = explode($type, $data);

                        if (count($split_data) < 5 || count($split_data) > 5) {
                            $res['error'][$line] = 'Format ไฟล์ไม่ถูกต้อง';
                        } else {
                            list($mobile, $code, $keyword, $value, $expire) = $split_data;
                            $expire = date('Y-m-d', strtotime($expire));
                            if (!preg_match('/^([0]{1}|[66]{2})(6|7|8|9){1}[0-9]{8}$/', $mobile)) {
                                $res['error'][$line] = "เบอร์โทรศัพท์ไม่ถูกต้อง ~ {$mobile}";
                                continue;
                            }

                            if (in_array($code, $already_code)) {
                                $res['error'][$line] = "โค้ดซ้ำในไฟล์ที่นำเข้า ~ {$code}";
                                continue;
                            }

                            if (in_array($code, $db_code)) {
                                $res['error'][$line] = "โค้ดซ้ำในในระบบ ~ {$code}";
                                continue;
                            }

                            if (!isset($privilege_list[$keyword][$expire]) || !in_array($value, $privilege_list[$keyword][$expire])) {
                                $res['error'][$line] = "ไม่พบข้อมูล ~ {$keyword}{$type}{$value}{$type}{$expire}";
                                continue;
                            }
                        }
                        array_push($already_code, $code);
                    }
                    break;
                case 'CTM':
                    if ($campaign->privileges) {
                        $privileges = $campaign->privileges->map(function ($privilege, $key) use (&$templates) {
                            $template_file = FileModel::where(['table_id' => $privilege->id, 'table_name' => 'privileges'])->pluck('origin_name', 'id')->toArray();
                            [$keys, $values] = Arr::divide($template_file);
                            $templates[$privilege->id]['f_id'] = $keys[0];
                            $templates[$privilege->id]['template'] = $values[0];
                            return $privilege;
                        });

                        foreach ($contents as $key => $data) {
                            $line = $key + 1;
                            $split_data = explode($type, $data);

                            if (count($split_data) < 3 || count($split_data) > 3) {
                                $res['error'][$line] = 'Format ไฟล์ไม่ถูกต้อง';
                            } else {
                                list($mobile, $code, $template) = $split_data;
                                if (!preg_match('/^([0]{1}|[66]{2})(6|7|8|9){1}[0-9]{8}$/', $mobile)) {
                                    $res['error'][$line] = "เบอร์โทรศัพท์ไม่ถูกต้อง ~ {$mobile}";
                                    continue;
                                }

                                if (in_array($code, $already_code)) {
                                    $res['error'][$line] = "โค้ดซ้ำในไฟล์ที่นำเข้า ~ {$code}";
                                    continue;
                                }

                                if (in_array($code, $db_code)) {
                                    $res['error'][$line] = "โค้ดซ้ำในในระบบ ~ {$code}";
                                    continue;
                                }

                                if (!collect($templates)->contains('template', $template)) {
                                    $res['error'][$line] = "ไม่พบข้อมูล - {$template}";
                                    continue;
                                }
                            }
                        }
                    }
                    break;
            }
            if (!isset($res['error'])) {
                $res['msg'] = 'Format ถูกต้องสามารถอัพโหลดไฟล์ได้';
            }
        } else {
            $res['error'] = 'ไม่พบไฟล์';
        }

        $res['status'] = isset($res['error']) ? 'error' : 'ok';

        return response()->json($res);
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Warehouse  $warehouse
     * @return \Illuminate\Http\Response
     */
    public function generate(Request $request, Campaign $campaign)
    {
        $now = date('YmdHis');
        $uuid = base64_encode(auth()->id());
        $type = $request->type_split_data;
        $temp_path_file = storage_path("temp_file/{$campaign->keyword}/file_{$uuid}.tmp");
        $temp_file_encrypt = File::get($temp_path_file);
        $temp_file_content = Crypt::decrypt($temp_file_encrypt);

        switch ($campaign->template_type) {
            case 'STD':
                $privilege_list = $campaign->privileges->groupBy(function ($privilege) {
                    return $privilege->shop->keyword;
                })->map(function ($privileges) {
                    return $privileges->groupBy(function ($privilege) {
                        return date('Y-m-d', strtotime($privilege->end_date));
                    })->map(function ($groupedPrivileges) {
                        return $groupedPrivileges->pluck('keyword', 'value')->all();
                    })->all();
                })->all();
                break;
            case 'CTM':
                $privileges = $campaign->privileges->map(function ($privilege, $key) use (&$templates) {
                    $template_file = FileModel::where(['table_id' => $privilege->id, 'table_name' => 'privileges'])->pluck('origin_name', 'id')->toArray();
                    [$keys, $values] = Arr::divide($template_file);
                    $templates[$privilege->id]['f_id'] = $keys[0];
                    $templates[$privilege->id]['template'] = $values[0];
                    return $privilege;
                });
                break;
        }

        $result = [];
        if ($temp_file_content) {
            $refid = "{$campaign->keyword}@{$now}";
            $unique_data = DB::connection('storage_code')->table($campaign->table_name)->where(['flag' => ['ok', 'deviate']])->pluck('unique_code', 'secret_code')->toArray();
            [$already_secret, $already_unique] = Arr::divide($unique_data);
            $contents = explode("\r\n",  $temp_file_content);

            foreach ($contents as $key => $content) {
                switch ($campaign->template_type) {
                    case 'STD':
                        list($mobile, $code, $keyword, $value, $expire) = explode($type, $content);

                        $privilege_keyword = $privilege_list[$keyword][$expire][$value];
                        $mobile = Str::padLeft(Str::substr($mobile, -9), 11, '66');
                        $expire = date('Y-m-d 23:59:59', strtotime($expire));

                        break;
                    case 'CTM':
                        $template_file = collect($templates)->firstWhere('template', 'RW_web_e-code_Shopee_200_THB_14DEC23.jpg');
                        $f_id = $template_file['f_id'];
                        break;
                }

                $unique = $this->getUnique($privilege_keyword, $already_secret);
                $secret_code =  $this->getSecretCode($campaign->keyword, $already_unique);
                $result[$key]['mobile'] = $mobile;
                $result[$key]['code'] = $code;
                $result[$key]['secret_code'] = $secret_code;
                $result[$key]['unique'] = $this->getPathRedeem($campaign->owner->keyword, $campaign->keyword, $unique);

                $insert = [];
                $insert['f_id']              = $f_id;
                $insert['refid']             = "'$refid'";
                $insert['partner_keyword']   = "'{$campaign->owner->keyword}'";
                $insert['privilege_keyword'] = "'{$privilege_keyword}'";
                $insert['shop_keyword']      = "'{$keyword}'";
                $insert['secret_code']       = "'{$secret_code}'";
                $insert['unique_code']       = "'{$unique}'";
                $insert['msisdn']            = "'{$mobile}'";
                $insert['code']              = "'{$code}'";
                $insert['import_date']       = "now()";
                $insert['expire_date']       = "'{$expire}'";
                $insert['flag']              = "'ok'";
                $insert['is_use']            = "'no'";

                $condition = implode(', ', array_map(function ($key, $value) {
                    return "$key = $value";
                }, array_keys($insert), $insert));

                $result[$key]['sql'] = "INSERT INTO `{$campaign->table_name}` SET {$condition};";
            }
        }

        return response()->json($result);
    }

    public function getUnique($keyword, $arr)
    {
        $unique = $keyword . Str::random(7);
        $has_data = collect($arr)->contains($unique);
        if ($has_data) {
            $this->getUnique($keyword, $arr);
        }
        return $unique;
    }
    public function getSecretCode($keyword, $arr)
    {

        $secret_code = $this->genSecrectCode($keyword);
        $has_data = collect($arr)->contains($secret_code);
        if ($has_data) {
            $this->getSecretCode($keyword, $arr);
        }
        return $secret_code;
    }

    public function genSecrectCode($keyword, $length = 9)
    {
        $length = $length - strlen($keyword);
        $alphabets = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
        $numbers = '23456789';
        $characters = $alphabets . $numbers;
        $randomString = '';

        for ($i = 0; $i < $length; $i++) {
            if ($i % 2 == 0) {
                $randomString .= $alphabets[rand(0, strlen($alphabets) - 1)];
            } else {
                $randomString .= $numbers[rand(0, strlen($numbers) - 1)];
            }
        }
        $shuffledString = str_shuffle($randomString);

        return $keyword . $shuffledString;
    }
}
